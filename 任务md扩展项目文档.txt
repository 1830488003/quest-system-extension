# 任务系统扩展 - 开发日志

## 任务目标
将一个现有的“任务系统”油猴脚本（`任务.md`）改造为一个标准的 SillyTavern 扩展。

## 初始分析与计划 - 2025/6/8 上午11:31

1.  **需求分析**: 
    *   阅读并理解 `任务.md` 脚本的全部功能。
    *   功能点包括：在扩展菜单添加“任务日志”入口、任务弹窗UI（包含可接任务、当前任务、已完成任务、AI生成任务等板块）、任务的接受/放弃/完成逻辑、AI判断任务完成状态、AI动态生成新任务、可编辑的AI生成指令。
    *   核心依赖：SillyTavern & TavernHelper 的前端 API，jQuery。
    *   数据存储：使用 TavernHelper 的 `variables` API 将任务状态保存在会话中。

2.  **改造计划**:
    *   **步骤 1: 创建文件结构**。在当前目录下新建 `quest-system-extension` 文件夹，并创建 `manifest.json`, `index.js`, `style.css`, `settings.html` 文件。
    *   **步骤 2: 编写 `manifest.json`**。定义扩展的基本信息，如名称、作者、版本，并指定 `js` 和 `css` 的入口文件。
    *   **步骤 3: 迁移样式**。将油猴脚本中 `createQuestPopupHtml` 函数内联的 `<style>` 标签内容提取到 `style.css` 文件中，并进行必要的选择器调整。
    *   **步骤 4: 编写 `settings.html`**。创建一个简单的设置页面，用于在酒馆设置中显示扩展信息，并确认扩展已加载。
    *   **步骤 5: 核心逻辑重构 (`index.js`)**。
        *   移除油猴脚本的头部、`@grant` 等特有指令。
        *   移除复杂的 API 延时加载和重试逻辑（`mainInitialize`, `attemptToLoadCoreApis`），因为在标准扩展中，`jQuery(async () => { ... });` 执行时，所需的核心 API 通常已经可用。
        *   将所有 JavaScript 代码包裹在 `jQuery(async () => { ... });` 中。
        *   保留核心功能函数，如 `loadPlayerTasks`, `savePlayerTasks`, `createQuestPopupHtml` 等。
        *   修改 UI 注入逻辑：使用 `$.get()` 异步加载 `settings.html` 并注入到酒馆设置页面。
        *   将创建“任务日志”菜单项的逻辑 (`setupQuestMenuItem`) 作为扩展的主入口点。

## 开发日志 - 2025/6/8

*   **完成基础文件结构搭建**:
    *   创建了 `quest-system-extension` 文件夹。
    *   创建了 `quest-system-extension/manifest.json` 文件，定义了扩展的元数据。
    *   创建了 `quest-system-extension/style.css` 文件，并迁移了初始样式。
    *   创建了 `quest-system-extension/settings.html` 文件，作为设置页面的占位符。
    *   创建了 `quest-system-extension/index.js` 文件，并完成了基本框架的搭建，包括入口函数和动态加载 `settings.html` 的逻辑。

*   **迁移核心逻辑与UI**:
    *   将常量、数据结构、设置管理 (`load/saveSettings`)、任务数据管理 (`load/saveTasks`) 迁移至 `index.js`。
    *   使用 `extension_settings` 和 `saveSettingsDebounced` 替换了原有的数据存储方式，符合酒馆扩展规范。
    *   实现了动态生成任务弹窗 (`createQuestPopupHtml`) 和刷新 (`refreshQuestPopup`) 的功能。
    *   在酒馆菜单中添加了“任务日志”入口按钮 (`createQuestMenuItem`)。
*   **完成交互逻辑**:
    *   实现了任务的接受 (`acceptQuest`)、放弃 (`abandonQuest`) 和完成 (`completeQuest`) 的核心逻辑。
    *   使用事件委托机制在 `bindEventListeners` 函数中统一处理所有按钮的点击事件，增强了代码的健壮性。
*   **集成AI功能**:
    *   实现了 `generateAiQuests` 函数，通过 `TavernHelper.tryGetGenerationResult` 调用AI生成新任务。
    *   添加了AI响应的解析、校验和错误处理逻辑。
    *   完成了AI相关UI（生成按钮、Prompt输入框）的事件绑定。

## 项目完成 - 2025/6/8

所有计划的功能均已成功从油猴脚本迁移并重构为一个独立的SillyTavern扩展。代码结构清晰，并添加了详细的注释。

**最终文件结构**:
- `quest-system-extension/manifest.json`
- `quest-system-extension/index.js`
- `quest-system-extension/style.css`
- `quest-system-extension/settings.html`

该扩展现在是一个功能完整的任务系统。

## v2.0.0 - 架构升级：持久化与角色专属数据 - 2025/6/29

### 问题背景
插件的初始版本将任务数据存储在SillyTavern的“聊天变量”中。这种方式存在两个主要问题：
1.  **数据易失**：刷新页面或在某些情况下切换角色会导致所有任务进度丢失。
2.  **数据混淆**：所有角色的任务数据都混合在一起，无法为每个角色维护一个独立的任务线。

### 解决方案
为了解决这些问题，并根据用户的明确指示，对插件的数据存储架构进行了彻底的重构。

### 实施步骤：
1.  **切换存储后端**:
    *   放弃了易失的“聊天变量”，将所有任务数据（包括可接任务、玩家任务状态、自定义AI指令）的存储后端切换为浏览器的 **`localStorage`**。这确保了数据在刷新页面后依然存在，实现了真正的持久化。

2.  **实现角色专属存储 (借鉴 `real-time-status-bar` 方案)**:
    *   集成了成熟的角色识别逻辑，通过获取当前聊天文件的唯一标识符 (`currentChatFileIdentifier`) 来区分不同的角色卡。
    *   所有 `localStorage` 的键 (key) 都被动态构建，包含了角色标识符。例如，角色“爱丽丝”的任务数据会存放在 `quest_system_player_tasks_v1_alice` 中，而角色“鲍勃”的会存放在 `quest_system_player_tasks_v1_bob` 中。

3.  **实现无缝角色切换**:
    *   插件现在会通过一个定时器（每2秒检查一次）来实时监控角色的切换。
    *   当检测到用户切换到另一个角色时，任务日志会自动重新加载该角色专属的任务数据，确保了不同角色任务线的完全隔离和无缝切换。

4.  **实现自动数据迁移**:
    *   为了保证用户平滑过渡，插件内置了一次性的数据迁移功能。
    *   在加载时，它会自动检测旧的、存储在“聊天变量”中的数据。如果找到，会将其无缝地迁移到当前角色的新 `localStorage` 存储中，并自动清除旧的聊天变量数据，防止数据冗余。

### 任务状态：
**完成**。插件现在拥有了健壮的、持久化的、角色专属的数据存储系统，从根本上解决了数据丢失和混淆的问题，显著提升了插件的稳定性和用户体验。
